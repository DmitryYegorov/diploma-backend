generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  USER
}

enum RoomType {
  COMPUTER
  LECTURE
}

enum LoadType {
  CONSULTATION
  COURSE_WORK
  EXAM
  CREDIT
  POSTGRADUATE
  TESTING
  PRACTICE
  DIPLOMA_DESIGN
  STATE_EXAMINATION_BOARD
  LAB
  LECTION
  PRACTICE_CLASS
}

enum Week {
  FIRST
  SECOND
  WEEKLY
}

enum ScheduleClassUpdateType {
  SWAP
  CANCEL
  RESCHEDULED
}

enum ReportState {
  DRAFT
  SENT
  APPROVED
  REQUEST_CHANGES
}

enum ReportType {
  MONTH
  SEMESTER
  YEAR
  TOTAL
}

enum ClassType {
  LAB
  LECTION
  PRACTICE_CLASS
}

enum EventType {
  CONSULTATION
  COURSE_WORK
  EXAM
  CREDIT
  POSTGRADUATE
  TESTING
  PRACTICE
  DIPLOMA_DESIGN
  STATE_EXAMINATION_BOARD
}

model User {
  id             String    @id @default(value: uuid()) @db.Uuid
  email          String    @unique @db.VarChar()
  firstName      String    @db.VarChar()
  middleName     String?   @db.VarChar()
  lastName       String    @db.VarChar()
  password       String    @db.VarChar()
  role           Role      @default(USER)
  activationCode String?   @db.VarChar()
  activatedAt    DateTime?
  createdAt      DateTime  @default(now())
  invitedAt      DateTime  @default(now())
  invitedBy      String?   @db.Uuid
  isActive       Boolean   @default(false)

  ScheduleClasses     ScheduleClasses[]     @relation("teaching")
  Subject             Subject[]
  ScheduleClassUpdate ScheduleClassUpdate[]
  Report              Report[]
  OtherLoad           OtherLoad[]
  LoadPlan            LoadPlan[]
  TotalReport         TotalReport[]
  Document            Document[]
  ReportNote          ReportNote[]
  Notification        Notification[]
  @@map("user")
}

model Subject {
  id        String    @id @default(value: uuid()) @db.Uuid
  name      String    @db.VarChar()
  shortName String    @db.VarChar()
  createdAt DateTime  @default(value: now())
  deletedAt DateTime?
  user      User      @relation(fields: [createdBy], references: [id])
  createdBy String    @db.Uuid
  deletedBy String?   @db.Uuid

  ScheduleClasses ScheduleClasses[] @relation("SubjectOnScheduleClasses")
  OtherLoad       OtherLoad[]
  ReportLoad      ReportLoad[]
  LoadPlan        LoadPlan[]
  @@map("subject")
}

model ScheduleClasses {
  id             String       @id @default(value: uuid()) @db.Uuid
  teacher        User         @relation(name: "teaching", fields: [teacherId], references: [id])
  teacherId      String       @db.Uuid
  subject        Subject      @relation(name: "SubjectOnScheduleClasses", fields: [subjectId], references: [id])
  subjectId      String       @db.Uuid
  type           ClassType
  week           Week         @default(WEEKLY)
  semester       Semester     @relation(name: "SemesterOnScheduleClasees", fields: [semesterId], references: [id])
  semesterId     String       @db.Uuid
  room           Room         @relation(name: "RoomOnScheduleClasses", fields: [roomId], references: [id])
  roomId         String       @db.Uuid
  weekDay        Int
  scheduleTime   ScheduleTime @relation(name: "ScheduleTimeOnScheduleClasses", fields: [scheduleTimeId], references: [id])
  scheduleTimeId String       @db.Uuid
  startDate      DateTime?
  endDate        DateTime?
  createdAt      DateTime     @default(value: now())
  updatedAt      DateTime?
  createdBy      String       @db.Uuid
  updatedBy      String?      @db.Uuid

  GroupScheduleClass  GroupScheduleClass[]
  ScheduleClassUpdate ScheduleClassUpdate[]
  ReportLoad          ReportLoad[]
  @@map("schedule-classes")
}

model GroupScheduleClass {
  id              String          @id @default(value: uuid()) @db.Uuid
  scheduleClass   ScheduleClasses @relation(fields: [scheduleClassId], references: [id], onDelete: Cascade)
  group           Group           @relation(fields: [groupId], references: [id], onDelete: Cascade)
  scheduleClassId String          @db.Uuid
  groupId         String          @db.Uuid


  @@map("group_schedule-classes")
}

model Faculty {
  id        String @id @default(value: uuid()) @db.Uuid
  name      String @db.VarChar()
  shortName String @db.VarChar()

  Speciality Speciality[] @relation("FacultyOnGroup")
  @@map("faculty")
}

model Group {
  id           String     @id @default(value: uuid()) @db.Uuid
  group        Int
  subGroup     Int
  course       Int
  semester     Semester   @relation(fields: [semesterId], references: [id])
  semesterId   String     @db.Uuid
  speciality   Speciality @relation(fields: [specialityId], references: [id])
  specialityId String     @db.Uuid

  GroupScheduleClass GroupScheduleClass[]
  OtherLoadGroup     OtherLoadGroup[]
  @@map("group")
}

model Room {
  id     String   @id @default(value: uuid()) @db.Uuid
  campus String   @db.VarChar(5)
  room   String   @db.VarChar(5)
  type   RoomType

  ScheduleClasses ScheduleClasses[] @relation("RoomOnScheduleClasses")
  @@map("room")
}

model ScheduleTime {
  id          String @id @default(value: uuid()) @db.Uuid
  order       Int
  startHours  Int
  startMinute Int
  endHours    Int
  endMinute   Int

  ScheduleClasses ScheduleClasses[] @relation("ScheduleTimeOnScheduleClasses")
  @@map("schedule-time")
}

model Semester {
  id             String       @id @default(value: uuid()) @db.Uuid
  name           String       @db.VarChar()
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  academicYearId String       @db.Uuid
  startDate      DateTime
  endDate        DateTime
  isArchived     Boolean?     @default(value: false)

  ScheduleClasses ScheduleClasses[] @relation("SemesterOnScheduleClasees")
  Group           Group[]
  LoadPlan        LoadPlan[]
  OtherLoad       OtherLoad[]
  TotalReport     TotalReport[]
  @@map("semester")
}

model AcademicYear {
  id         String   @id @default(value: uuid()) @db.Uuid
  startDate  DateTime
  endDate    DateTime
  isArchived Boolean? @default(value: false)

  Semester    Semester[]
  TotalReport TotalReport[]
  Document    Document[]
  @@map("academic-year")
}

model ReportLoad {
  id              String           @id @default(value: uuid()) @db.Uuid
  type            LoadType?
  subject         Subject?         @relation(fields: [subjectId], references: [id])
  subjectId       String?          @db.Uuid
  report          Report           @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId        String           @db.Uuid
  duration        Float
  date            DateTime
  createdAt       DateTime?        @default(value: now())
  otherLoad       OtherLoad?       @relation(fields: [otherLoadId], references: [id], onDelete: Cascade)
  otherLoadId     String?          @db.Uuid
  scheduleClass   ScheduleClasses? @relation(fields: [scheduleClassId], references: [id], onDelete: Cascade)
  scheduleClassId String?          @db.Uuid

  @@map("report-load")
}

model OtherLoad {
  id            String    @id @default(value: uuid()) @db.Uuid
  type          EventType
  studentsCount Int?
  subject       Subject?  @relation(fields: [subjectId], references: [id])
  subjectId     String?   @db.Uuid
  duration      Float
  date          DateTime
  semester      Semester  @relation(fields: [semesterId], references: [id], onDelete: Cascade)
  semesterId    String    @db.Uuid
  createdAt     DateTime? @default(value: now())
  created       User      @relation(fields: [createdBy], references: [id])
  createdBy     String    @db.Uuid

  OtherLoadGroup OtherLoadGroup[]
  ReportLoad     ReportLoad[]
  @@map("other-load")
}

model OtherLoadGroup {
  id          String    @id @default(value: uuid()) @db.Uuid
  group       Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId     String    @db.Uuid
  otherLoad   OtherLoad @relation(fields: [otherLoadId], references: [id], onDelete: Cascade)
  otherLoadId String    @db.Uuid
}

model ScheduleClassUpdate {
  id              String                  @id @default(value: uuid()) @db.Uuid
  scheduleClass   ScheduleClasses         @relation(fields: [scheduleClassId], references: [id], onDelete: Cascade)
  scheduleClassId String                  @db.Uuid
  type            ScheduleClassUpdateType
  teacher         User?                   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId       String?                 @db.Uuid
  classDate       DateTime
  rescheduleDate  DateTime?
  createdAt       DateTime?               @default(value: now())
  reason          String
  createdBy       String                  @db.Uuid

  @@map("schedule-class-update")
}

model Report {
  id         String       @id @default(value: uuid()) @db.Uuid
  name       String       @db.VarChar()
  state      ReportState? @default(DRAFT)
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime?    @default(value: now())
  creater    User         @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  createdBy  String       @db.Uuid
  sentAt     DateTime?
  approvedAt DateTime?

  ReportLoad        ReportLoad[]
  ReportTotalReport ReportTotalReport[]
  ReportNote        ReportNote[]
  @@map("report")
}

model ReportNote {
  id        String    @id @default(value: uuid()) @db.Uuid
  report    Report    @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId  String    @db.Uuid
  note      String
  author    User      @relation(fields: [createdBy], references: [id])
  createdBy String    @db.Uuid
  createdAt DateTime? @default(value: now())
  updatedAt DateTime?

  @@map("report-note")
}

model Speciality {
  id        String  @id @default(value: uuid()) @db.Uuid
  faculty   Faculty @relation(name: "FacultyOnGroup", fields: [facultyId], references: [id])
  facultyId String  @db.Uuid
  name      String  @db.VarChar()
  shortName String  @db.VarChar()

  Group    Group[]
  LoadPlan LoadPlan[]
  @@map("specialty")
}

model LoadPlan {
  id             String     @id @default(value: uuid()) @db.Uuid
  type           String     @db.VarChar()
  subgroupsCount Int
  speciality     Speciality @relation(fields: [specialityId], references: [id])
  specialityId   String     @db.Uuid
  course         Int
  subject        Subject?   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId      String?    @db.Uuid
  duration       Float
  semester       Semester   @relation(fields: [semesterId], references: [id], onDelete: Cascade)
  semesterId     String     @db.Uuid
  teacher        User       @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId      String     @db.Uuid
  createdAt      DateTime?  @default(value: now())

  @@map("load-plan")
}

model TotalReport {
  id                String              @id @default(value: uuid()) @db.Uuid
  name              String
  type              String              @db.VarChar()
  semester          Semester?           @relation(fields: [semesterId], references: [id])
  semesterId        String?             @db.Uuid
  academicYear      AcademicYear?       @relation(fields: [academicYearId], references: [id])
  academicYearId    String?             @db.Uuid
  createdAt         DateTime?           @default(value: now())
  creater           User                @relation(fields: [createdBy], references: [id])
  createdBy         String              @db.Uuid
  ReportTotalReport ReportTotalReport[]
}

model ReportTotalReport {
  id            String      @id @default(value: uuid()) @db.Uuid
  report        Report      @relation(fields: [reportId], references: [id])
  reportId      String      @db.Uuid
  totalReport   TotalReport @relation(fields: [totalReportId], references: [id])
  totalReportId String      @db.Uuid
}

model Document {
  id             String        @id @default(value: uuid()) @db.Uuid
  name           String        @db.VarChar()
  type           String        @db.VarChar()
  path           String        @db.VarChar()
  academicYear   AcademicYear? @relation(fields: [academicYearId], references: [id])
  academicYearId String?       @db.Uuid
  description    String        @db.VarChar()
  author         User          @relation(fields: [loadedBy], references: [id])
  loadedBy       String        @db.Uuid

  @@map("document")
}

model Notification {
  id           String    @id @default(value: uuid()) @db.Uuid
  user         User      @relation(fields: [userId], references: [id])
  userId       String    @db.Uuid
  subject      String
  notification String
  readed       Boolean?  @default(value: false)
  createdAt    DateTime? @default(value: now())

  @@map("notification")
}
