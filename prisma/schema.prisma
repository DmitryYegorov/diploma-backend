// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum ClassType {
  LAB
  LECTION
  PRACTICE_CLASS
}

enum RoomType {
  COMPUTER
  LECTURE
}

enum EventType {
  LECTION
  PRACTICE_CLASS
  LAB
  CONSULTATION
  COURSE_WORK
  EXAM
  CREDIT
  POSTGRADUATE
  TESTING
  PRACTICE
  DIPLOMA_DESIGN
  STATE_EXAMINATION_BOARD
}

enum Week {
  FIRST
  SECOND
  WEEKLY
}

model User {
  id             String    @id @default(value: uuid()) @db.Uuid
  email          String    @unique @db.VarChar()
  firstName      String    @db.VarChar()
  middleName     String?   @db.VarChar()
  lastName       String    @db.VarChar()
  password       String    @db.VarChar()
  role           Role      @default(USER)
  activationCode String?   @db.VarChar()
  activatedAt    DateTime?
  createdAt      DateTime  @default(now())
  invitedAt      DateTime  @default(now())
  invitedBy      String?   @db.Uuid
  isActive       Boolean   @default(false)

  ScheduleClasses ScheduleClasses[] @relation("teaching")
  Event           Event[]           @relation("UserOnEvent")
  Subject         Subject[]
  @@map("user")
}

model Subject {
  id        String    @id @default(value: uuid()) @db.Uuid
  name      String    @db.VarChar()
  shortName String    @db.VarChar()
  createdAt DateTime  @default(value: now())
  deletedAt DateTime?
  user      User      @relation(fields: [createdBy], references: [id])
  createdBy String    @db.Uuid
  deletedBy String?   @db.Uuid

  ScheduleClasses ScheduleClasses[] @relation("SubjectOnScheduleClasses")
  @@map("subject")
}

model ScheduleClasses {
  id             String       @id @default(value: uuid()) @db.Uuid
  teacher        User         @relation(name: "teaching", fields: [teacherId], references: [id])
  teacherId      String       @db.Uuid
  subject        Subject      @relation(name: "SubjectOnScheduleClasses", fields: [subjectId], references: [id])
  subjectId      String       @db.Uuid
  type           ClassType
  week           Week         @default(WEEKLY)
  semester       Semester     @relation(name: "SemesterOnScheduleClasees", fields: [semesterId], references: [id])
  semesterId     String       @db.Uuid
  room           Room         @relation(name: "RoomOnScheduleClasses", fields: [roomId], references: [id])
  roomId         String       @db.Uuid
  weekDay        Int
  scheduleTime   ScheduleTime @relation(name: "ScheduleTimeOnScheduleClasses", fields: [scheduleTimeId], references: [id])
  scheduleTimeId String       @db.Uuid
  groupIds       Json         @db.Json
  createdAt      DateTime     @default(value: now())
  updatedAt      DateTime?
  createdBy      String       @db.Uuid
  updatedBy      String?      @db.Uuid

  @@map("schedule-classes")
}

model Event {
  id             String       @id @default(value: uuid()) @db.Uuid
  user           User         @relation(name: "UserOnEvent", fields: [userId], references: [id])
  userId         String       @db.Uuid
  type           EventType
  title          String       @db.VarChar()
  note           String
  startDate      DateTime
  endDate        DateTime
  isRecurring    Boolean
  isAllDay       Boolean
  rRule          String?
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId String       @db.Uuid
  createdAt      DateTime     @default(value: now())
  createdBy      String       @db.Uuid

  ExEvent ExEvent[]
  @@map("event")
}

model ExEvent {
  id            String @id @default(value: uuid()) @db.Uuid
  event         Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId       String @db.Uuid
  exceptionDate String

  @@map("event-exception")
}

model Faculty {
  id        String @id @default(value: uuid()) @db.Uuid
  name      String @db.VarChar()
  shortName String @db.VarChar()

  Group Group[] @relation("FacultyOnGroup")
  @@map("faculty")
}

model Group {
  id        String  @id @default(value: uuid()) @db.Uuid
  faculty   Faculty @relation(name: "FacultyOnGroup", fields: [facultyId], references: [id])
  facultyId String  @db.Uuid
  group     Int
  subGroup  Int
  courese   Int

  @@map("group")
}

model Room {
  id     String   @id @default(value: uuid()) @db.Uuid
  campus Int
  room   Int
  type   RoomType

  ScheduleClasses ScheduleClasses[] @relation("RoomOnScheduleClasses")
  @@map("room")
}

model ScheduleTime {
  id          String @id @default(value: uuid()) @db.Uuid
  order       Int
  startHours  Int
  startMinute Int
  endHours    Int
  endMinute   Int

  ScheduleClasses ScheduleClasses[] @relation("ScheduleTimeOnScheduleClasses")
  @@map("schedule-time")
}

model Semester {
  id             String       @id @default(value: uuid()) @db.Uuid
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId String       @db.Uuid
  startDate      DateTime
  endDate        DateTime
  isArchived     Boolean?     @default(value: false)

  ScheduleClasses ScheduleClasses[] @relation("SemesterOnScheduleClasees")
  @@map("semester")
}

model AcademicYear {
  id         String   @id @default(value: uuid()) @db.Uuid
  startDate  DateTime
  endDate    DateTime
  isArchived Boolean? @default(value: false)

  Semester Semester[]
  Event    Event[]
  @@map("academic-year")
}
